#!/bin/bash

source /dev/stdin

if [ -z "$1" ]; then
    echo "usage: cat /path/to/etc/conf.d/net | $0 <interface>"
    exit 1
fi
if=$1

# Function calculates number of bit in a netmask
#
mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}

route() {
    MASK=$3
    IP=$1
    numbits=$(mask2cidr $MASK)
    DEST="Destination=$IP/$numbits"
    GW="Gateway=$5"
    printf "[Route]\n%s\n%s" $DEST $GW
}

net_gateway() {
    printf "Gateway=%s" $3
}

echo "[Match]"
echo "Name=$if"
echo
CONFIG=dns_servers_${if}
eval "array=(\"\${${CONFIG}[@]}\" )"
echo "[Network]"
for d in "${array[@]}"; do
    echo "DNS=$d"
done
CONFIG=config_${if}
eval "array=(\"\${${CONFIG}[@]}\" )"
for d in "${array[@]}"; do
    # XXX skip ipv6
    if echo $d | grep -q ":"; then
        continue
    fi
    if echo $d | grep -q netmask; then
        MASK=$(echo $d | awk '{ print $3 }')
        IP=$(echo $d | awk '{ print $1 }')
        numbits=$(mask2cidr $MASK)
        echo "Address=$IP/$numbits"
    else 
        echo "Address=$d"
    fi
done
CONFIG=routes_${if}
routes_output=""
eval "array=(\"\${${CONFIG}[@]}\" )"
for d in "${array[@]}"; do
    # XXX skip ipv6
    if echo $d | grep -q ":"; then
        continue
    fi
    if echo $d | grep -q netmask; then
        printf -v routes_output "%s\n\n%s" "$routes_output" "$(route $d)"
    else
        printf -v routes_output "%s%s" "$(net_gateway $d)" "$routes_output"
    fi
done
echo "$routes_output"
